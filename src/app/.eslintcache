[{"/Users/jonathanwong/Projects/github/trebek/src/app/src/index.js":"1","/Users/jonathanwong/Projects/github/trebek/src/app/src/components/buttons/TeamButton.js":"2","/Users/jonathanwong/Projects/github/trebek/src/app/src/GameOver.js":"3","/Users/jonathanwong/Projects/github/trebek/src/app/src/components/scoring/ScoreboardCell.js":"4","/Users/jonathanwong/Projects/github/trebek/src/app/src/App.js":"5","/Users/jonathanwong/Projects/github/trebek/src/app/src/components/scoring/VerticalScoreboard.js":"6","/Users/jonathanwong/Projects/github/trebek/src/app/src/components/Question.js":"7","/Users/jonathanwong/Projects/github/trebek/src/app/src/components/scoring/TeamScoreboardCell.js":"8"},{"size":500,"mtime":1611625572381,"results":"9","hashOfConfig":"10"},{"size":1132,"mtime":1611633314159,"results":"11","hashOfConfig":"10"},{"size":890,"mtime":1611625572371,"results":"12","hashOfConfig":"10"},{"size":179,"mtime":1611625572380,"results":"13","hashOfConfig":"10"},{"size":8875,"mtime":1611635168374,"results":"14","hashOfConfig":"10"},{"size":653,"mtime":1611629282015,"results":"15","hashOfConfig":"10"},{"size":1741,"mtime":1611632321457,"results":"16","hashOfConfig":"10"},{"size":193,"mtime":1611625572381,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"19o5605",{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jonathanwong/Projects/github/trebek/src/app/src/index.js",[],"/Users/jonathanwong/Projects/github/trebek/src/app/src/components/buttons/TeamButton.js",["35","36"],"/Users/jonathanwong/Projects/github/trebek/src/app/src/GameOver.js",["37"],"/Users/jonathanwong/Projects/github/trebek/src/app/src/components/scoring/ScoreboardCell.js",[],"/Users/jonathanwong/Projects/github/trebek/src/app/src/App.js",["38","39","40","41","42"],"import logo from './logo.svg';\nimport './App.css';\nimport React, { Component,useState, useEffect } from 'react'\nimport ls from 'local-storage';\nimport Button from './components/buttons/Button'\nimport TeamButton from './components/buttons/TeamButton'\nimport Question from './components/Question';\nimport ReactLoading from 'react-loading'\nimport Scoreboard from './components/scoring/Scoreboard'\n;\nimport {FaPlus, FaRegSave} from 'react-icons/fa';\nimport GameOver from './GameOver';\nimport { VerticalScoreboard } from './components/scoring/VerticalScoreboard';\nconst TREBEK_LS_KEY = 'trebek-game'\nconst CATEGORY_COLORS = [\n  '#e76f51',\n  '#f4a261',\n  '#e9c46a',\n  '#2a9d8f',\n  '#264653',\n  '#7b1e7a',\n];\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questions: [],\n      current_team: null,\n      curr_question_idx: 0,\n      display_answer: false,\n      teams: [],\n      team_colors: {},\n      team_answers: {},\n      team_answered_questions: {},\n      correct_responses: [],\n      team_points: {},\n      question_results: [],\n      loading: true,\n      game_ended: false,\n      source_url: '',\n    };\n  }\n\n  componentDidMount() {\n    let game = ls.get(TREBEK_LS_KEY);\n    if(!game) {\n      this._start_new_game();\n    } \n    else {\n      console.log('setting from game');\n      this.setState(\n        JSON.parse(game)\n      );\n    }\n  }\n\n  _start_new_game() {\n    this.setState({loading: true});\n    fetch('/api/questions')\n      .then((res) => res.json())\n      .then((data) => {\n        let q = data.questions;\n        let idx = 0;\n        let category_colors = {};\n\n        q.forEach((question) => {\n          if (!category_colors[question.category.id]) {\n            category_colors[question.category.id] = CATEGORY_COLORS[idx];\n            ++idx;\n          }\n          question.category.color = category_colors[question.category.id];\n        });\n\n        // init teams\n        this.setState({\n          questions: q,\n          current_team: 'A',\n          teams: ['A', 'B'],\n          team_colors: {\n            A: '#6699CC',\n            B: '#4c7226',\n          },\n          team_points: {\n            A: 0,\n            B: 0,\n          },\n          correct_responses: [],\n          team_answered_questions: {\n            A: {},\n            B: {},\n          },\n          loading: false,\n          source_url: data.game_url,\n          game_ended: false,\n          curr_question_idx: 0,\n          display_answer: false\n        });\n      });\n  }\n\n  _save_game() {\n    ls.set(TREBEK_LS_KEY, JSON.stringify(this.state));\n  }\n\n  _move_to_next_question() {\n    let current_team = this.state.current_team;\n    let teams = this.state.teams;\n    let curr_idx = teams.indexOf(current_team);\n\n    if (curr_idx == teams.length - 1) {\n      current_team = teams[0];\n    } else {\n      current_team = teams[curr_idx + 1];\n    }\n\n    let curr_q_idx = this.state.curr_question_idx;\n\n    if (curr_q_idx + 1 < this.state.questions.length) {\n      this.setState({\n        curr_question_idx: this.state.curr_question_idx + 1,\n        display_answer: false,\n        current_team: current_team,\n      });\n    } else {\n      ls.remove(TREBEK_LS_KEY)\n      this.setState({\n        game_ended: true,\n      });\n    }\n  }\n\n  _modify_score(team_id, value_modifier) {\n    let q = this.state.questions[this.state.curr_question_idx];\n    let team_points = Object.assign({}, this.state.team_points);\n    let team_answered_questions = Object.assign(\n      {},\n      this.state.team_answered_questions\n    );\n    if (!team_answered_questions[q.id]) {\n      team_answered_questions[q.id] = {};\n    }\n\n    let modifier_text = value_modifier > 0 ? '+' : '-';\n\n    team_answered_questions[q.id][team_id] = `${modifier_text}${q.value}`;\n\n    team_points[team_id] += q.value * value_modifier;\n\n    this.setState({\n      team_points,\n      team_answered_questions,\n    });\n  }\n\n  _change_team_turn() {\n    let current_team = this.state.current_team;\n    let teams = this.state.teams;\n    let curr_idx = teams.indexOf(current_team);\n\n    if (curr_idx == teams.length - 1) {\n      current_team = teams[0];\n    } else {\n      current_team = teams[curr_idx + 1];\n    }\n\n    this.setState({current_team: current_team});\n  }\n\n  _scoreboard_cell_clicked(question_id, question_idx) {\n    this.setState({\n      curr_question_idx: question_idx,\n    });\n  }\n  render() {\n    let team_buttons = this.state.teams.map(\n      function (team_id) {\n        let q = this.state.questions[this.state.curr_question_idx];\n        return (\n          <TeamButton\n            team_id={team_id}\n            sensitive={\n              !this.state.team_answered_questions[q.id] ||\n              !this.state.team_answered_questions[q.id][team_id]\n            }\n            color={this.state.team_colors[team_id]}\n            onIncrement={this._modify_score.bind(this, team_id, 1)}\n            onDecrement={this._modify_score.bind(this, team_id, -1)}\n          />\n        );\n      }.bind(this)\n    );\n\n    return (\n      <div className=\"App\">\n        <TopNavigation \n          onNewGameClick={this._start_new_game.bind(this)}\n          onSaveClick={this._save_game.bind(this)}  \n          />\n        {!this.state.loading && this.state.game_ended && (\n          <GameOver team_points={this.state.team_points} />\n        )}\n        {this.state.loading && <ReactLoading />}\n        {!this.state.loading && !this.state.game_ended && (\n          <div className=\"AppContainer\">\n            <div className='TopRow'>\n              <RemainingLabel \n                num_questions={this.state.questions.length} \n                curr_question_idx={this.state.curr_question_idx}\n                />\n                <div style={{flexGrow:1}} />\n              <TurnIndicator\n                team={this.state.current_team}\n                color={this.state.team_colors[this.state.current_team]}\n                onClick={this._change_team_turn.bind(this)}\n              />\n            </div>\n            <div className=\"QuestionContainer\">\n              {this.state.questions.length > 0 && (\n                <Question\n                  onAnswerClick={function () {\n                    this.setState({display_answer: true});\n                  }.bind(this)}\n                  displayAnswer={this.state.display_answer}\n                  question={this.state.questions[this.state.curr_question_idx]}\n                />\n              )}\n            </div>\n            <div className=\"BottomNavigation\">\n              <Button\n                onClick={this._move_to_next_question.bind(this)}\n                text=\"next\"\n                color=\"rgb(65, 71, 82)\"\n              ></Button>\n              <div className=\"BottomNavigation-spacer\" />\n              {team_buttons}\n            </div>\n            {\n              <Scoreboard\n                team_answered_questions={this.state.team_answered_questions}\n                questions={this.state.questions}\n                team_points={this.state.team_points}\n                team_colors={this.state.team_colors}\n                current_question_index={this.state.curr_question_idx}\n                onCellClick={this._scoreboard_cell_clicked.bind(this)}\n              />\n            }\n            {\n              <VerticalScoreboard\n                team_points={this.state.team_points}\n                team_colors={this.state.team_colors}\n\n              />\n\n            }\n          </div>\n        )}\n\n        <div className=\"gameSource\">\n          <a href={this.state.source_url}>{this.state.source_url}</a>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction RemainingLabel({ num_questions, curr_question_idx}) {\n  return (\n    <div className='RemainingLabel'>\n      <div className='RemainingLabel-text'>{num_questions-(curr_question_idx + 1)} questions remaining!</div>\n    </div>\n  )\n}\n\n\nfunction TurnIndicator({ team, color, onClick}) {\n  return (\n    <div className='TurnIndicator' onClick={onClick}>\n      <div className='TurnIndicator-text' style={{color: color}}>\n        Team {team}'s turn\n      </div>\n    </div>\n  )\n}\n\nfunction TopNavigation({ onNewGameClick, onSaveClick }) {\n  return (\n    <div className=\"TopNavigation\">\n      <div\n        className='trebek-logo'\n      >\n        trebek.\n      </div>\n      <div style={{flexGrow: '1'}}></div>\n      <Button\n        classes=\"nav-button\"\n        onClick={onNewGameClick}\n        style={{\n          fontSize: '.5em',\n          backgroundColor: 'none',\n        }}\n        icon={<FaPlus className='nav-icon'/>}\n        text=\"New Game\"\n        color=\"rgb(65, 71, 82)\"\n      ></Button>\n      <Button\n        classes=\"nav-button\"\n        onClick={onSaveClick}\n        style={{\n          fontSize: '.5em',\n          backgroundColor: 'none',\n        }}\n        icon={<FaRegSave className='nav-icon'/>}\n        text=\"Save Game\"\n        color=\"rgb(65, 71, 82)\"\n      ></Button>\n    </div>\n  );\n}\n\n\nexport default App;\n","/Users/jonathanwong/Projects/github/trebek/src/app/src/components/scoring/VerticalScoreboard.js",[],"/Users/jonathanwong/Projects/github/trebek/src/app/src/components/Question.js",["43"],"/Users/jonathanwong/Projects/github/trebek/src/app/src/components/scoring/TeamScoreboardCell.js",[],{"ruleId":"44","severity":1,"message":"45","line":1,"column":28,"nodeType":"46","messageId":"47","endLine":1,"endColumn":35},{"ruleId":"44","severity":1,"message":"48","line":12,"column":21,"nodeType":"46","messageId":"47","endLine":12,"endColumn":31},{"ruleId":"49","severity":1,"message":"50","line":19,"column":39,"nodeType":"51","messageId":"52","endLine":19,"endColumn":41},{"ruleId":"44","severity":1,"message":"53","line":1,"column":8,"nodeType":"46","messageId":"47","endLine":1,"endColumn":12},{"ruleId":"44","severity":1,"message":"54","line":3,"column":27,"nodeType":"46","messageId":"47","endLine":3,"endColumn":35},{"ruleId":"44","severity":1,"message":"55","line":3,"column":37,"nodeType":"46","messageId":"47","endLine":3,"endColumn":46},{"ruleId":"49","severity":1,"message":"50","line":111,"column":18,"nodeType":"51","messageId":"52","endLine":111,"endColumn":20},{"ruleId":"49","severity":1,"message":"50","line":161,"column":18,"nodeType":"51","messageId":"52","endLine":161,"endColumn":20},{"ruleId":"44","severity":1,"message":"54","line":2,"column":27,"nodeType":"46","messageId":"47","endLine":2,"endColumn":35},"no-unused-vars","'FaMinus' is defined but never used.","Identifier","unusedVar","'class_name' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'logo' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used."]